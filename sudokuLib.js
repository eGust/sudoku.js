function shuffle(arr)
{
	for(var i=arr.length; i>1; )
	{
		var r = Math.floor(Math.random()*i), t = arr[--i];
		arr[i] = arr[r];
		arr[r] = t;
	}
	return arr;
}

function dictFromKeys(arr)
{
	var r = {};
	for(var i=0; i<arr.length; i++)
	{
		var k = arr[i];
		r[k] = k;
	}
	return r;
}

function Sudoku()
{
	if(this.solve == undefined)
	{
		self = Sudoku.prototype;
		const relative = [
				[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 18, 19, 20, 27, 36, 45, 54, 63, 72],
				[0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 18, 19, 20, 28, 37, 46, 55, 64, 73],
				[0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 18, 19, 20, 29, 38, 47, 56, 65, 74],
				[0, 1, 2, 4, 5, 6, 7, 8, 12, 13, 14, 21, 22, 23, 30, 39, 48, 57, 66, 75],
				[0, 1, 2, 3, 5, 6, 7, 8, 12, 13, 14, 21, 22, 23, 31, 40, 49, 58, 67, 76],
				[0, 1, 2, 3, 4, 6, 7, 8, 12, 13, 14, 21, 22, 23, 32, 41, 50, 59, 68, 77],
				[0, 1, 2, 3, 4, 5, 7, 8, 15, 16, 17, 24, 25, 26, 33, 42, 51, 60, 69, 78],
				[0, 1, 2, 3, 4, 5, 6, 8, 15, 16, 17, 24, 25, 26, 34, 43, 52, 61, 70, 79],
				[0, 1, 2, 3, 4, 5, 6, 7, 15, 16, 17, 24, 25, 26, 35, 44, 53, 62, 71, 80],
				[0, 1, 2, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 27, 36, 45, 54, 63, 72],
				[0, 1, 2, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 28, 37, 46, 55, 64, 73],
				[0, 1, 2, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 29, 38, 47, 56, 65, 74],
				[3, 4, 5, 9, 10, 11, 13, 14, 15, 16, 17, 21, 22, 23, 30, 39, 48, 57, 66, 75],
				[3, 4, 5, 9, 10, 11, 12, 14, 15, 16, 17, 21, 22, 23, 31, 40, 49, 58, 67, 76],
				[3, 4, 5, 9, 10, 11, 12, 13, 15, 16, 17, 21, 22, 23, 32, 41, 50, 59, 68, 77],
				[6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 24, 25, 26, 33, 42, 51, 60, 69, 78],
				[6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 24, 25, 26, 34, 43, 52, 61, 70, 79],
				[6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 24, 25, 26, 35, 44, 53, 62, 71, 80],
				[0, 1, 2, 9, 10, 11, 19, 20, 21, 22, 23, 24, 25, 26, 27, 36, 45, 54, 63, 72],
				[0, 1, 2, 9, 10, 11, 18, 20, 21, 22, 23, 24, 25, 26, 28, 37, 46, 55, 64, 73],
				[0, 1, 2, 9, 10, 11, 18, 19, 21, 22, 23, 24, 25, 26, 29, 38, 47, 56, 65, 74],
				[3, 4, 5, 12, 13, 14, 18, 19, 20, 22, 23, 24, 25, 26, 30, 39, 48, 57, 66, 75],
				[3, 4, 5, 12, 13, 14, 18, 19, 20, 21, 23, 24, 25, 26, 31, 40, 49, 58, 67, 76],
				[3, 4, 5, 12, 13, 14, 18, 19, 20, 21, 22, 24, 25, 26, 32, 41, 50, 59, 68, 77],
				[6, 7, 8, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 33, 42, 51, 60, 69, 78],
				[6, 7, 8, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 34, 43, 52, 61, 70, 79],
				[6, 7, 8, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 35, 44, 53, 62, 71, 80],
				[0, 9, 18, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 45, 46, 47, 54, 63, 72],
				[1, 10, 19, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 45, 46, 47, 55, 64, 73],
				[2, 11, 20, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 45, 46, 47, 56, 65, 74],
				[3, 12, 21, 27, 28, 29, 31, 32, 33, 34, 35, 39, 40, 41, 48, 49, 50, 57, 66, 75],
				[4, 13, 22, 27, 28, 29, 30, 32, 33, 34, 35, 39, 40, 41, 48, 49, 50, 58, 67, 76],
				[5, 14, 23, 27, 28, 29, 30, 31, 33, 34, 35, 39, 40, 41, 48, 49, 50, 59, 68, 77],
				[6, 15, 24, 27, 28, 29, 30, 31, 32, 34, 35, 42, 43, 44, 51, 52, 53, 60, 69, 78],
				[7, 16, 25, 27, 28, 29, 30, 31, 32, 33, 35, 42, 43, 44, 51, 52, 53, 61, 70, 79],
				[8, 17, 26, 27, 28, 29, 30, 31, 32, 33, 34, 42, 43, 44, 51, 52, 53, 62, 71, 80],
				[0, 9, 18, 27, 28, 29, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 54, 63, 72],
				[1, 10, 19, 27, 28, 29, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 55, 64, 73],
				[2, 11, 20, 27, 28, 29, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 56, 65, 74],
				[3, 12, 21, 30, 31, 32, 36, 37, 38, 40, 41, 42, 43, 44, 48, 49, 50, 57, 66, 75],
				[4, 13, 22, 30, 31, 32, 36, 37, 38, 39, 41, 42, 43, 44, 48, 49, 50, 58, 67, 76],
				[5, 14, 23, 30, 31, 32, 36, 37, 38, 39, 40, 42, 43, 44, 48, 49, 50, 59, 68, 77],
				[6, 15, 24, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 51, 52, 53, 60, 69, 78],
				[7, 16, 25, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 51, 52, 53, 61, 70, 79],
				[8, 17, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 51, 52, 53, 62, 71, 80],
				[0, 9, 18, 27, 28, 29, 36, 37, 38, 46, 47, 48, 49, 50, 51, 52, 53, 54, 63, 72],
				[1, 10, 19, 27, 28, 29, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 55, 64, 73],
				[2, 11, 20, 27, 28, 29, 36, 37, 38, 45, 46, 48, 49, 50, 51, 52, 53, 56, 65, 74],
				[3, 12, 21, 30, 31, 32, 39, 40, 41, 45, 46, 47, 49, 50, 51, 52, 53, 57, 66, 75],
				[4, 13, 22, 30, 31, 32, 39, 40, 41, 45, 46, 47, 48, 50, 51, 52, 53, 58, 67, 76],
				[5, 14, 23, 30, 31, 32, 39, 40, 41, 45, 46, 47, 48, 49, 51, 52, 53, 59, 68, 77],
				[6, 15, 24, 33, 34, 35, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 60, 69, 78],
				[7, 16, 25, 33, 34, 35, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 61, 70, 79],
				[8, 17, 26, 33, 34, 35, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 62, 71, 80],
				[0, 9, 18, 27, 36, 45, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 72, 73, 74],
				[1, 10, 19, 28, 37, 46, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 72, 73, 74],
				[2, 11, 20, 29, 38, 47, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 72, 73, 74],
				[3, 12, 21, 30, 39, 48, 54, 55, 56, 58, 59, 60, 61, 62, 66, 67, 68, 75, 76, 77],
				[4, 13, 22, 31, 40, 49, 54, 55, 56, 57, 59, 60, 61, 62, 66, 67, 68, 75, 76, 77],
				[5, 14, 23, 32, 41, 50, 54, 55, 56, 57, 58, 60, 61, 62, 66, 67, 68, 75, 76, 77],
				[6, 15, 24, 33, 42, 51, 54, 55, 56, 57, 58, 59, 61, 62, 69, 70, 71, 78, 79, 80],
				[7, 16, 25, 34, 43, 52, 54, 55, 56, 57, 58, 59, 60, 62, 69, 70, 71, 78, 79, 80],
				[8, 17, 26, 35, 44, 53, 54, 55, 56, 57, 58, 59, 60, 61, 69, 70, 71, 78, 79, 80],
				[0, 9, 18, 27, 36, 45, 54, 55, 56, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74],
				[1, 10, 19, 28, 37, 46, 54, 55, 56, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74],
				[2, 11, 20, 29, 38, 47, 54, 55, 56, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74],
				[3, 12, 21, 30, 39, 48, 57, 58, 59, 63, 64, 65, 67, 68, 69, 70, 71, 75, 76, 77],
				[4, 13, 22, 31, 40, 49, 57, 58, 59, 63, 64, 65, 66, 68, 69, 70, 71, 75, 76, 77],
				[5, 14, 23, 32, 41, 50, 57, 58, 59, 63, 64, 65, 66, 67, 69, 70, 71, 75, 76, 77],
				[6, 15, 24, 33, 42, 51, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 78, 79, 80],
				[7, 16, 25, 34, 43, 52, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 78, 79, 80],
				[8, 17, 26, 35, 44, 53, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 78, 79, 80],
				[0, 9, 18, 27, 36, 45, 54, 55, 56, 63, 64, 65, 73, 74, 75, 76, 77, 78, 79, 80],
				[1, 10, 19, 28, 37, 46, 54, 55, 56, 63, 64, 65, 72, 74, 75, 76, 77, 78, 79, 80],
				[2, 11, 20, 29, 38, 47, 54, 55, 56, 63, 64, 65, 72, 73, 75, 76, 77, 78, 79, 80],
				[3, 12, 21, 30, 39, 48, 57, 58, 59, 66, 67, 68, 72, 73, 74, 76, 77, 78, 79, 80],
				[4, 13, 22, 31, 40, 49, 57, 58, 59, 66, 67, 68, 72, 73, 74, 75, 77, 78, 79, 80],
				[5, 14, 23, 32, 41, 50, 57, 58, 59, 66, 67, 68, 72, 73, 74, 75, 76, 78, 79, 80],
				[6, 15, 24, 33, 42, 51, 60, 61, 62, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80],
				[7, 16, 25, 34, 43, 52, 60, 61, 62, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80],
				[8, 17, 26, 35, 44, 53, 60, 61, 62, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79],
			];
		
		function findSolutions(sudoku, table, callback)
		{
			// init
			sudoku.table = table.slice();
			//*
			var cells = [], i=0, j=0, remains = {}, filled = {};
			for(i=0; i<81; i++)
			{
				var v = table[i], c = { mask: {}, candidate: 0, relative: {}, index: i, };
				cells[i] = c;
				if(v)
					filled[i] = c;
				else
					remains[i] = c;
			}

			for(i=0; i<81; i++)
			{
				var r = relative[i], rd = {};
				for(j=0; j<20; j++)
				{
					var n = r[j];
					if(n in remains)
						rd[n] = cells[n];
				}
				cells[i].relative = rd;
			}

			for(i in filled)
			{
				var v = table[i], c = filled[i];
				for(var cid in c.relative)
					cells[cid].mask[v] = v;
			}
			// */

			sudoku.cells = cells;
			for(var cid in remains)
			{
				var c = cells[cid];
				c.candidate = 9 - Object.keys(c.mask).length;
			}

			sudoku.remains = remains;
			sudoku.stop = false;
			sudoku.solutions = 0;
			sudoku.tryNext(callback);
		}

		self.solve = function (table) {
			var found = null;
			findSolutions(this, table, function(sudoku) 
				{
					found = sudoku.table.slice();
					sudoku.stop = true;
				});
			return found;
		}

		self.tryNext = function (fcb)
		{
			var remains = this.remains, table = this.table;
			if(Object.keys(remains).length==0)
			{
				// found!
				this.solutions++;
				if(typeof(fcb)=="function")
					fcb(this);
				return 1;
			}

			// find a cell with min candidate
			var minCan = 9, cell = null;
			for(var cid in remains)
			{
				var c = remains[cid], ccnt = c.candidate;
				if(ccnt >= minCan)
					continue;
				cell = c;
				minCan = ccnt;
			}

			var cid = cell.index, bak = {}, rels = cell.relative, result = 0;
			delete remains[cid];
			// backup
			for(var rid in rels)
			{
				if(rid in remains)
				{
					var c = rels[rid];
					bak[c.index] = { masks: Object.keys(c.mask), candidate: c.candidate, cell: c };
				}
			}

			// try each candidate
			for(var i=1; i<=9; i++)
			{
				if(cell.mask[i])
					continue;

				// try
				table[cid] = i;
				for(var bid in bak)
				{
					var c = bak[bid].cell;
					c.mask[i] = i;
					c.candidate = 9 - Object.keys(c.mask).length;
				}

				result += this.tryNext(fcb);
				if(this.stop)
					return result;

				// restore
				table[cid] = 0;
				for(var bid in bak)
				{
					var b = bak[bid], c = b.cell;
					c.mask = dictFromKeys(b.masks);
					c.candidate = b.candidate;
				}
			}
			remains[cid] = cell;
			return result;
		}

		self.findAllSolutions = function (table) {
			var found = [];
			findSolutions(this, table, function(sudoku) 
				{
					found.push(sudoku.table.slice());
				});
			return found.length ? found : null;
		}

		Sudoku.generate = function() {
			const Bases = [ 0, 3, 6 ], Indexes = [ [1, 4], [1, 7], [4, 1], [4, 7], [7, 1], [7, 4], ];
			var table = [], result = null;

			do {
				var i = 0, j = 0;
				for(i=0; i<81; i++)
					table[i] = 0;

				for(i=0; i<Bases.length; i++)
				{
					var b = Bases[i], digits = shuffle([ 1, 2, 3, 4, 5, 6, 7, 8, 9, ]);
					for(j=0; j<9; j++)
					{
						var r = b + Math.floor(j/3), c = b + j%3;
						table[r*9+c] = digits[j];
					}
				}

				var mask = {};
				function updateMask(n)
				{
					if(n)
						mask[n] = n;
				}

				for(i=0; i<Indexes.length; i++)
				{
					var t = Indexes[i], rb = t[0]*9, cb = t[1];
					mask = {};
					t = [];
					for(j=0; j<9; j++)
					{
						updateMask(table[j*9+cb]);
						updateMask(table[rb+j]);
					}

					for(j=1; j<=9; j++)
						if(!(j in mask))
							t.push(j);
					//console.log(mask, t);
					table[rb+cb] = t[Math.floor(Math.random()*t.length)];
				}

				result = Sudoku.checker.findAllSolutions(table);
				if (result)
				{
					//console.log(result.length);
					result = result[Math.floor(Math.random()*result.length)];
				}
			} while (!result);
			return result;
		}

		Sudoku.crossNumber = function(table, minCross, delta)
		{
			if(!delta)
				delta = 1;

			minCross = (minCross<20) ? 20 : minCross;
			var condition = minCross + Math.floor(Math.random()*(delta+1)), 
				indexes = [], cnt = 0, org = table, times = 0;

			var crossRowCol = Math.floor(Math.random()*9);
			if(Math.random()<0.5)
			{
				// col
				for(var i=0, idx=0; i<81; i++)
				{
					if((i%9)==crossRowCol)
					{
						table[i] = 0;
					}
					else
					{
						indexes[idx++] = i;
					}
				}
			}
			else
			{
				// row
				for(var i=0, idx=0; i<81; i++)
				{
					if(Math.floor(i/9)==crossRowCol)
					{
						table[i] = 0;
					}
					else
					{
						indexes[idx++] = i;
					}
				}
			}

			do {
				shuffle(indexes);
				table = org.slice();
				cnt = 9;

				for(var j=0; j<72; j++)
				{
					var i = indexes[j], bak = table[i], solutions = 0;
					table[i] = 0;

					findSolutions(Sudoku.checker, table, function(sudoku) 
						{
							if(++solutions>1)
								sudoku.stop = true;
						});

					if(solutions>1)
					{
						table[i] = bak;
						continue;
					}
					
					if(++cnt >= condition)
						break;
				}

				if(++times>2)
					break;
			} while (cnt < minCross);

			return (cnt >= minCross) ? table : null;
		}
	}

	this.table = [];
	this.remains = null;
	this.stop = false;
	this.solutions = 0;
	return this;
}

Sudoku.checker = new Sudoku();

function testSolve()
{
	const  tests = [
[0,0,0,0,0,0,0,1,0,9,5,0,0,6,0,4,7,0,6,1,0,0,0,0,5,0,0,0,9,3,2,0,4,0,0,1,5,2,0,0,0,3,0,0,8,4,8,1,0,0,0,0,2,0,0,6,7,0,0,0,1,9,0,0,0,0,0,0,0,0,0,7,0,3,0,5,0,1,8,0,0],
[7,0,1,0,6,4,0,5,0,0,0,4,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,8,4,0,5,9,1,3,0,0,9,3,0,6,8,7,0,2,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,8,2,4,0,9,5,2,0,0,0,1,0,0],
[0,7,4,0,0,0,0,8,0,0,0,8,9,0,0,0,5,0,0,6,0,0,0,1,0,9,0,3,0,0,0,8,4,0,0,2,2,0,6,3,0,0,0,0,0,0,5,0,0,9,0,0,0,4,0,0,0,0,6,5,0,0,0,0,0,3,0,0,0,9,4,0,0,0,0,0,0,0,1,7,0],
[0,0,0,0,6,9,0,0,0,1,0,0,0,0,3,0,2,8,5,6,0,0,0,0,9,0,3,0,0,5,0,1,7,0,0,0,0,7,0,0,2,6,8,1,0,2,0,0,0,0,0,7,0,0,0,0,0,0,0,1,0,8,0,7,0,0,0,4,2,1,0,0,4,0,9,0,7,0,0,0,6],
[7,3,0,0,6,0,0,8,0,0,0,0,0,0,3,2,0,0,8,0,0,0,4,5,0,6,0,6,0,0,8,0,0,0,2,0,0,0,0,0,5,1,0,4,0,0,1,2,0,0,0,0,0,0,3,0,0,5,2,0,7,0,0,4,5,0,0,0,7,9,0,2,0,0,0,0,0,0,6,0,4],
[0,0,0,0,0,0,0,1,0,0,5,0,0,0,0,8,0,7,1,0,7,9,0,3,0,6,2,4,0,6,8,3,7,5,0,0,0,1,0,0,0,5,0,0,0,0,7,0,4,1,0,0,0,6,2,6,0,7,0,0,0,0,3,0,0,0,3,2,0,0,0,0,0,9,0,0,0,4,2,0,0],
[4,0,5,6,0,0,9,3,1,9,0,6,4,0,0,0,2,8,1,0,0,0,0,2,6,0,0,8,0,0,7,0,0,3,0,0,0,0,0,5,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,5,0,0,0,6,0,0,0,0,9,2,4,3,2,0,3,0,0,4,0,8,0],
[2,0,6,0,0,0,0,0,0,0,0,7,0,3,8,0,0,9,5,0,9,7,0,0,4,3,0,0,0,0,0,0,5,0,0,0,0,1,0,9,0,0,7,6,0,0,0,2,0,0,4,0,8,0,0,0,0,3,9,2,5,0,0,7,2,0,5,0,6,0,1,0,0,0,0,0,1,0,0,0,0],
[0,6,0,0,0,0,4,0,0,0,0,7,3,4,1,5,0,0,2,0,4,6,0,8,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,2,9,0,0,0,0,3,8,0,0,7,0,6,9,0,4,0,0,0,0,0,8,0,0,0,0,0,8,0,4,3,6,0,0,0,0,0,0,0,1,7,0],
[7,0,0,0,0,0,6,9,4,0,2,5,4,0,0,0,0,0,6,0,8,0,0,1,3,2,5,2,0,0,0,0,0,8,4,0,4,0,0,3,0,0,9,0,6,5,0,0,0,0,0,0,3,0,0,0,0,0,6,5,2,0,9,1,0,0,0,0,2,0,0,0,0,6,0,0,0,3,0,0,0],

[0,9,0,7,0,0,0,4,3,1,0,0,0,0,0,9,0,0,0,0,7,4,8,0,0,0,0,0,8,0,0,0,0,0,0,9,0,5,0,0,1,2,0,6,0,7,0,0,0,0,0,0,0,0,0,0,5,1,0,8,0,0,2,0,1,4,0,5,7,0,0,0,0,0,0,3,9,0,0,0,1]
	]
	var s=new Sudoku();

	/*
	for(var i=0; i<tests.length; i++)
	{
		var t = tests[i].slice();
		var t1= Date.now();
		var r = s.solve(t)
		var t2= Date.now();
		console.log(i+')\t', (t2-t1)+' ms');
		console.log(r);
	}
	*/

	var t1= Date.now();
	//for(var tms=0; tms<100; tms++)
	{
		for(var i=0; i<tests.length; i++)
			console.log(s.solve(tests[i]));
	}
	var t2= Date.now();
	console.log((t2-t1)+' ms');
}

function testGen()
{
	var t1= Date.now(), r = [];
	for(var i=0; i<1000; i++)
		r.push(Sudoku.generate());
	var t2= Date.now();
	console.log((t2-t1)+' ms');
}

function testCrs()
{
	var t1= Date.now(), r = [], failed = 0;
	for(var i=0; i<100; i++)
	{
		var t = Sudoku.crossNumber(Sudoku.generate(), 45, 10);
		//console.log(i);
		failed += (t == null);
		r.push( t );
	}
	var t2= Date.now();
	console.log((t2-t1)+' ms', failed);
}
